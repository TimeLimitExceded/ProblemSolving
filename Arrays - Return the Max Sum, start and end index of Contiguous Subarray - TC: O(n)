import java.util.*;
public class Solution {
    public int[] maxSubArray( int[] A )
    {
        int maxSum = Integer.MIN_VALUE;
        int curSum = 0;
        int start = 0;
        int startIndex = 0;
        int endIndex = -1;

        for ( int i = 0 ; i < A.length ; i++ )
        {
         curSum = curSum + A[i];
         if ( curSum > maxSum )
           {
             maxSum = curSum;
             startIndex = start;
             endIndex = i;
           }
         // *** Kadane's Algorithm + Some tweak ***
         // 1. Ignore the CurSum. If you carry it,
         //    your next Sum's value is going to reduce.
         // 2. If the curSum is negative, then the new sub-array
         //    will obviously start from next index.
         if ( curSum < 0 )
            {
                curSum = 0;
                start = i+1;
            }
        }
        startIndex = startIndex+1;
        endIndex = endIndex+1;

        return new int[]{maxSum, startIndex, endIndex};
    }
}

// *********************
// Main Class
// *********************


public class Main
{
    public static void main(String[] args)
    {
        int arr[] = new int[4];
        arr[0] = 2;
        arr[1] = 3;
        arr[2] = 4;
        arr[3] = -10;

        Solution sol = new Solution();
        int[] output  = sol.maxSubArray(arr);
        System.out.println("Maximum Sum: " + output[0]);
        System.out.println("Sub-arrays Start Index: " + output[1]);
        System.out.println("Sub-arrays End Index: " + output[2]);
    }
}







